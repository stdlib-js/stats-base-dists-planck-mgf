{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/factory.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar expm1 = require( '@stdlib/math-base-special-expm1' );\n\n\n// MAIN //\n\n/**\n* Evaluates the moment-generating function (MGF) for a Planck distribution with shape parameter `lambda` at a value `t`.\n*\n* @param {number} t - input value\n* @param {PositiveNumber} lambda - shape parameter\n* @returns {number} evaluated MGF\n*\n* @example\n* var y = mgf( 0.2, 0.5 );\n* // returns ~1.5181\n*\n* @example\n* var y = mgf( 0.4, 1.5 );\n* // returns ~1.1645\n*\n* @example\n* var y = mgf( NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = mgf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction mgf( t, lambda ) {\n\tif ( isnan( t ) || isnan( lambda ) || lambda <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn expm1( -lambda ) / expm1( t - lambda );\n}\n\n\n// EXPORTS //\n\nmodule.exports = mgf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar expm1 = require( '@stdlib/math-base-special-expm1' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the moment-generating function (MGF) of a Planck distribution with shape parameter `lambda`.\n*\n* @param {PositiveNumber} lambda - shape parameter\n* @returns {Function} MGF\n*\n* @example\n* var mgf = factory( 0.8 );\n* var y = mgf( -0.2 );\n* // returns ~0.8711\n*/\nfunction factory( lambda ) {\n\tif ( isnan( lambda ) || lambda <= 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn mgf;\n\n\t/**\n\t* Evaluates the moment-generating function (MGF) for a Planck distribution.\n\t*\n\t* @private\n\t* @param {number} t - input value\n\t* @returns {number} evaluated MGF\n\t*\n\t* @example\n\t* var y = mgf( 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction mgf( t ) {\n\t\tif ( isnan( t ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn expm1( -lambda ) / expm1( t - lambda );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the moment-generating function (MGF) for a Planck distribution.\n*\n* @module @stdlib/stats-base-dists-planck-mgf\n*\n* @example\n* var mgf = require( '@stdlib/stats-base-dists-planck-mgf' );\n*\n* var y = mgf( 0.2, 0.5 );\n* // returns ~1.5181\n*\n* y = mgf( 0.4, 1.5 );\n* // returns ~1.1645\n*\n* var mymgf = mgf.factory( 0.8 );\n* y = mymgf( -0.2 );\n* // returns ~0.8711\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EACnDC,EAAQ,QAAS,iCAAkC,EAgCvD,SAASC,EAAKC,EAAGC,EAAS,CACzB,OAAKJ,EAAOG,CAAE,GAAKH,EAAOI,CAAO,GAAKA,GAAU,EACxC,IAEDH,EAAO,CAACG,CAAO,EAAIH,EAAOE,EAAIC,CAAO,CAC7C,CAKAL,EAAO,QAAUG,ICjEjB,IAAAG,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,iCAAkC,EAC9DC,EAAQ,QAAS,iCAAkC,EACnDC,EAAQ,QAAS,iCAAkC,EAgBvD,SAASC,EAASC,EAAS,CAC1B,GAAKH,EAAOG,CAAO,GAAKA,GAAU,EACjC,OAAOJ,EAAkB,GAAI,EAE9B,OAAOK,EAaP,SAASA,EAAK,EAAI,CACjB,OAAKJ,EAAO,CAAE,EACN,IAEDC,EAAO,CAACE,CAAO,EAAIF,EAAO,EAAIE,CAAO,CAC7C,CACD,CAKAL,EAAO,QAAUI,IC3BjB,IAAIG,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAU,IAKdF,EAAaC,EAAM,UAAWC,CAAQ,EAKtC,OAAO,QAAUD",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isnan", "expm1", "mgf", "t", "lambda", "require_factory", "__commonJSMin", "exports", "module", "constantFunction", "isnan", "expm1", "factory", "lambda", "mgf", "setReadOnly", "main", "factory"]
}
